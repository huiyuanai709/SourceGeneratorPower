using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace SourceGeneratorPower.HttpClient
{
    [Generator]
    public class HttpClientGenerator : ISourceGenerator
    {
        public void Initialize(GeneratorInitializationContext context)
        {
            context.RegisterForSyntaxNotifications(() => new HttpClientSyntax());
        }

        public void Execute(GeneratorExecutionContext context)
        {
            if (!(context.SyntaxContextReceiver is HttpClientSyntax receiver))
            {
                return;
            }

            var extensionSource = new StringBuilder($@"
using SourceGeneratorPower.HttpClient;
using Microsoft.Extensions.Configuration;

namespace Microsoft.Extensions.DependencyInjection
{{
    public static class ScanInjectOptions
    {{
        public static void AddGeneratedHttpClient(this IServiceCollection services)
        {{
");
            
            foreach (var typeSymbol in receiver.TypeSymbols)
            {
                var sourceText = ProcessInterface(context, typeSymbol);
                var sourceTextFormatted = CSharpSyntaxTree.ParseText(sourceText, new CSharpParseOptions(LanguageVersion.CSharp8)).GetRoot().NormalizeWhitespace().SyntaxTree.GetText().ToString();
                context.AddSource($"{typeSymbol.ToDisplayString()}.AutoGenerated.cs", SourceText.From(sourceTextFormatted, Encoding.UTF8));
                extensionSource.AppendLine($@"services.AddScoped<{typeSymbol.ToDisplayString()}, {typeSymbol.Name.Substring(1)}>();");
            }

            extensionSource.AppendLine("}}}");
            var extensionTextFormatted = CSharpSyntaxTree.ParseText(extensionSource.ToString(), new CSharpParseOptions(LanguageVersion.CSharp8)).GetRoot().NormalizeWhitespace().SyntaxTree.GetText().ToString();
            context.AddSource($"SourceGeneratorPower.HttpClientExtension.AutoGenerated.cs", SourceText.From(extensionTextFormatted, Encoding.UTF8));
        }

        private string ProcessInterface(GeneratorExecutionContext context, ITypeSymbol typeSymbol)
        {
            var className = typeSymbol.Name.Substring(1);
            string constructor = GenerateConstructor(context, typeSymbol);
            var source = new StringBuilder($@"
using System.Net.Http.Headers;
using System.Text.Json;
using System.Web;
using System.Threading.Tasks;

namespace SourceGeneratorPower.HttpClient
{{

public class {className} : {typeSymbol.ToDisplayString()}
{{
");
            source.Append(' ', 8);
            source.AppendLine(constructor);
            source.AppendLine(GenerateMethods(context, typeSymbol));

            source.AppendLine("}");
            source.AppendLine("}");
            return source.ToString();
        }

        private string GenerateMethods(GeneratorExecutionContext context, ITypeSymbol typeSymbol)
        {
            var source = new StringBuilder();
            var httpClientName = typeSymbol.GetAttributes()
                .First(x => x.AttributeClass.ToDisplayString() == "SourceGeneratorPower.HttpClient.HttpClientAttribute")
                .ConstructorArguments[0].Value.ToString();
            foreach (var member in typeSymbol.GetMembers())
            {
                if (!(member is IMethodSymbol methodSymbol))
                {
                    continue;
                }

                var (httpMethod, requestUri) = GetHttpMethod(methodSymbol);
                if (httpMethod is null)
                {
                    continue;
                }
                if(httpMethod == "Get")
                {
                    source.AppendLine(GenerateGetMethod(context, typeSymbol, methodSymbol, httpClientName, requestUri));
                    continue;
                }

                source.AppendLine(GenerateOtherMethod(context, typeSymbol, methodSymbol, httpClientName, httpMethod, requestUri));
            }
            return source.ToString();
        }

        private string GenerateGetMethod(GeneratorExecutionContext context, ITypeSymbol typeSymbol, IMethodSymbol methodSymbol, string httpClientName, string requestUri)
        {
            var returnType = (methodSymbol.ReturnType as INamedTypeSymbol)!.TypeArguments[0].ToDisplayString();
            var source = new StringBuilder($@"public {methodSymbol.ReturnType} {methodSymbol.Name}({string.Join(", ",methodSymbol.Parameters.Select(p => $"{p.Type} {p.Name}"))})");
            source.AppendLine("{");
            source.AppendLine($@"var httpClient = _httpClientFactory.CreateClient(""{httpClientName}"");");
            var dict = GetHeaders(typeSymbol, methodSymbol);
            foreach (var header in dict)
            {
                source.AppendLine($@"httpClient.DefaultRequestHeaders.Add(""{header.Key}"", HttpUtility.UrlEncode($""{header.Value}""));");
            }
            source.AppendLine($@"return httpClient.GetFromJsonAsync<{returnType}>($""{requestUri}"", {methodSymbol.Parameters.Last().Name});");
            source.AppendLine("}");
            return source.ToString();
        }

        private string GenerateOtherMethod(GeneratorExecutionContext context, ITypeSymbol typeSymbol, IMethodSymbol methodSymbol, string httpClientName, string httpMethod, string requestUri)
        {
            var returnType = (methodSymbol.ReturnType as INamedTypeSymbol).TypeArguments[0].ToDisplayString();
            var cancellationToken = methodSymbol.Parameters.Last().Name;
            var source = new StringBuilder($@"
public async {methodSymbol.ReturnType} {methodSymbol.Name}({string.Join(", ",methodSymbol.Parameters.Select(p => $"{p.Type} {p.Name}"))})");
            source.AppendLine("{");
            source.AppendLine($@"var httpClient = _httpClientFactory.CreateClient(""{httpClientName}"");");
            var dict = GetHeaders(typeSymbol, methodSymbol);
            foreach (var header in dict)
            {
                source.AppendLine($@"httpClient.DefaultRequestHeaders.Add(""{header.Key}"", HttpUtility.UrlEncode($""{header.Value}""));");
            }

            source.AppendLine($@"var jsonContent = JsonContent.Create({methodSymbol.Parameters.Last().Name}, new MediaTypeHeaderValue(""application/json""){{CharSet = ""UTF-8""}});");
            source.AppendLine($@"var response = await httpClient.{httpMethod}Async($""{requestUri}"", jsonContent, {cancellationToken});");
            source.AppendLine($@"return await response.Content.ReadFromJsonAsync<{returnType}>({cancellationToken}));");
            source.AppendLine("}");
            return source.ToString();
        }

        private Dictionary<string, string> GetHeaders(ITypeSymbol typeSymbol, IMethodSymbol methodSymbol)
        {
            var dict = new Dictionary<string, string>();
            foreach (var attributeData in typeSymbol.GetAttributes().Where(x => x.AttributeClass!.ToDisplayString() == "SourceGeneratorPower.HttpClient.HeaderAttribute"))
            {
                dict.Add(attributeData.ConstructorArguments[0].Value!.ToString(), attributeData.ConstructorArguments[1].Value!.ToString());
            }
            
            foreach (var attributeData in methodSymbol.GetAttributes().Where(x => x.AttributeClass!.ToDisplayString() == "SourceGeneratorPower.HttpClient.HeaderAttribute"))
            {
                dict.Add(attributeData.ConstructorArguments[0].Value!.ToString(), attributeData.ConstructorArguments[1].Value!.ToString());
            }

            return dict;
        }

        private Tuple<string, string> GetHttpMethod(IMethodSymbol methodSymbol)
        {
            var methodAttributes = methodSymbol.GetAttributes();
            var httpGetAttribute = methodAttributes.FirstOrDefault(x =>
                x.AttributeClass!.ToDisplayString() == "SourceGeneratorPower.HttpClient.HttpMethod.HttpGetAttribute");
            if (httpGetAttribute != null)
            {
                return new Tuple<string, string>("Get", httpGetAttribute.ConstructorArguments[0].Value!.ToString());
            }

            var httpPostAttribute = methodAttributes.FirstOrDefault(x =>
                x.AttributeClass!.ToDisplayString() == "SourceGeneratorPower.HttpClient.HttpMethod.HttpPostAttribute");
            if (httpPostAttribute != null)
            {
                return new Tuple<string, string>("Get", httpPostAttribute.ConstructorArguments[0].Value!.ToString());
            }

            var httpPutAttribute = methodAttributes.FirstOrDefault(x =>
                x.AttributeClass!.ToDisplayString() == "SourceGeneratorPower.HttpClient.HttpMethod.HttpPutAttribute");
            if (httpPutAttribute != null)
            {
                return new Tuple<string, string>("Get", httpPutAttribute.ConstructorArguments[0].Value!.ToString());
            }
            
            var httpDeleteAttribute = methodAttributes.FirstOrDefault(x =>
                x.AttributeClass!.ToDisplayString() == "SourceGeneratorPower.HttpClient.HttpMethod.HttpDeleteAttribute");
            if (httpDeleteAttribute != null)
            {
                return new Tuple<string, string>("Get", httpDeleteAttribute.ConstructorArguments[0].Value!.ToString());
            }
            
            var httpPatchAttribute = methodAttributes.FirstOrDefault(x =>
                x.AttributeClass!.ToDisplayString() == "SourceGeneratorPower.HttpClient.HttpMethod.HttpPatchAttribute");
            if (httpPatchAttribute != null)
            {
                return new Tuple<string, string>("Get", httpPatchAttribute.ConstructorArguments[0].Value!.ToString());
            }

            return null;
        }

        private string GenerateConstructor(GeneratorExecutionContext context, ITypeSymbol typeSymbol)
        {
            var className = typeSymbol.Name.Substring(1);
            var requiredServices = typeSymbol.GetAttributes().Where(x =>
                x.AttributeClass.ToDisplayString() == "SourceGeneratorPower.HttpClient.RequiredServiceAttribute");
            var constructorBuilder = new StringBuilder();
            var dict = new Dictionary<string, string>();
            dict.Add("_httpClientFactory", "IHttpClientFactory");
            foreach (var requiredService in requiredServices)
            {
                var services = requiredService.ConstructorArguments;
                dict.Add(services[1].Value.ToString(), services[0].Value.ToString());
            }
            
            foreach (var keyValuePair in dict)
            {
                constructorBuilder.AppendLine($"private readonly {keyValuePair.Value} {keyValuePair.Key};");
            }

            constructorBuilder.AppendLine($"public {className}(");

            constructorBuilder.Append(string.Join(",", dict.Select(x => $"{x.Value} {x.Key.Substring(1)}")));
            
            constructorBuilder.AppendLine(")");
            constructorBuilder.AppendLine("{");
            foreach (var key in dict.Keys)
            {
                constructorBuilder.AppendLine($"{key} = {key.Substring(1)};");
            }
            constructorBuilder.AppendLine("}");
            return constructorBuilder.ToString();
        }

        class HttpClientSyntax : ISyntaxContextReceiver
        {
            public List<ITypeSymbol> TypeSymbols { get; set; } = new List<ITypeSymbol>();

            public void OnVisitSyntaxNode(GeneratorSyntaxContext context)
            {
                if (context.Node is InterfaceDeclarationSyntax ids && ids.AttributeLists.Count > 0)
                {

                    ITypeSymbol typeSymbol = ModelExtensions.GetDeclaredSymbol(context.SemanticModel, ids) as ITypeSymbol;
                    if (typeSymbol!.GetAttributes().Any(x =>
                            x.AttributeClass!.ToDisplayString() ==
                            "SourceGeneratorPower.HttpClient.HttpClientAttribute"))
                    {
                        TypeSymbols.Add(typeSymbol);
                    }
                }
            }
        }
    }
}